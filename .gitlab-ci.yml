variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_IMAGE_NAME: "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG"
    POSTGRES_HOST: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test-pass
    POSTGRES_DB: testdb
    HELM_NAME: "golemio"
    K8S_DEPLOYMENT_NAME: integration-engine
    K8S_DEPLOYMENT_IMAGE_TAG: $CI_PIPELINE_ID

include:
    - template: "Workflows/Branch-Pipelines.gitlab-ci.yml"
    - project: "operator-ict/devops/gitlab-ci-pipeline"
      file:
          - "/docker/simple-build.yml"
          - "/k8s-golemio/helm-golemio-deploy.yml"
          - "/docs/golemio-gitlab-docs-pages.yml"
          - "/npm/bump-dependencies.yml"

cache:
    key:
        files:
            - package-lock.json
    paths:
        - node_modules

stages:
    - pre-test
    - test
    - build
    - release
    - deploy

.run_tests:
    stage: test
    services:
        - name: postgis/postgis:13-3.2-alpine
          alias: postgres
        - name: mvertes/alpine-mongo:4.0.5-0
          alias: mongo
        - redis:6.2.7-alpine
        - rabbitmq:3.11.2-alpine
    script:
        - npm install --ignore-scripts --progress=false
        # Audit production dependencies for HIGH vulnerabilities
        # TODO temporarily switch off audit
        - npm audit --omit dev --audit-level none
        - npm run lint
        - npm run build
        - export MONGO_CONN=mongodb://mongo/testdb
        - export POSTGRES_CONN=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
        - export REDIS_CONN=redis://redis
        - export NODE_ENV=test
        - export LOG_LEVEL=warn
        - export OPEN_STREET_MAP_API_URL_SEARCH=$OPEN_STREET_MAP_API_URL_SEARCH
        - export OPEN_STREET_MAP_API_URL_REVERSE=$OPEN_STREET_MAP_API_URL_REVERSE
        - export RABBIT_CONN=amqp://guest:guest@rabbitmq
        - export RABBIT_EXCHANGE_NAME=citests
        - export S3_BUCKET_NAME=integration-engine
        - export S3_UPLOAD_PART_SIZE=10
        - export S3_UPLOAD_QUEUE_SIZE=2
        - cp config/datasources.template.json config/datasources.json
        - npm run code-coverage
    tags:
        - docker
    rules:
        - if: $SKIP_TEST_AND_STAGES_AFTER
          when: never
        - when: always
    artifacts:
        when: always
        reports:
            junit: junit.xml
            coverage_report:
                coverage_format: cobertura
                path: coverage/cobertura-coverage.xml

run_tests:
    extends: .run_tests
    image: node:18.14.0-alpine

run_tests-node-next:
    extends: .run_tests
    image: node:19.6.0-alpine
    allow_failure: true

up_down_migrations:
    stage: test
    image: node:18.14.0-alpine
    services:
        - name: postgis/postgis:13-3.2-alpine
          alias: postgres
    script:
        - export POSTGRES_CONN=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
        # Run migrations from schema definitions
        - export SCH_NPM_TAG="dev" && [[ "$CI_COMMIT_REF_NAME" == "master" ]] && export SCH_NPM_TAG="latest"
        - export SCH_VERSION=$(npm show @golemio/schema-definitions@$SCH_NPM_TAG version)
        - export SCH_DIR=$(mktemp -d)
        - echo "Installing schema-definitions version $SCH_VERSION"
        - npm install --ignore-scripts --no-audit --prefix $SCH_DIR @golemio/schema-definitions@$SCH_VERSION
        - sh -c "cd $SCH_DIR/node_modules/@golemio/schema-definitions && npm run migrate-postgres-db >/dev/null && cd -"
        # Run migrations from modules
        - export POSTGRES_MIGRATIONS_DIR=node_modules/@golemio/**/db/migrations/**/postgresql
        - npm install --ignore-scripts --progress=false
        - npx golemio migrate-db up --silent
        - npx golemio migrate-db reset --silent
    tags:
        - docker
    rules:
        - if: $SKIP_TEST_AND_STAGES_AFTER
          when: never
        - when: always
